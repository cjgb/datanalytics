<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programación funcional on datanalytics</title>
    <link>/tags/programaci%C3%B3n-funcional/</link>
    <description>Recent content in programación funcional on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Thu, 24 Nov 2016 08:13:35 +0000</lastBuildDate><atom:link href="/tags/programaci%C3%B3n-funcional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Habiendo mónadas, ¿quién quiere callbacks?</title>
      <link>/2016/11/24/habiendo-monadas-quien-quiere-callbacks/</link>
      <pubDate>Thu, 24 Nov 2016 08:13:35 +0000</pubDate>
      
      <guid>/2016/11/24/habiendo-monadas-quien-quiere-callbacks/</guid>
      <description>Nunca me he visto en la tesitura de tener que usar callbacks porque no son mi guerra. Pero por lo que he oído de la gente que sabe mucho más que yo, son uno de esos infiernos de los que hay que huir con el mismo pavor que de los fors, los ifs, los elses (¡argggg! ¡he escrito else!) y los whiles.
Una pequeña maravilla teórica que me ha hecho replantearme la absoluta inutilidad de aquello que estudié en Álgebra III (funtores y demás) son las mónadas.</description>
    </item>
    
    <item>
      <title>purrr: otro dialecto para la programación funcional en R</title>
      <link>/2015/10/02/purrr-otro-dialecto-para-la-programacion-funcional-en-r/</link>
      <pubDate>Fri, 02 Oct 2015 08:13:54 +0000</pubDate>
      
      <guid>/2015/10/02/purrr-otro-dialecto-para-la-programacion-funcional-en-r/</guid>
      <description>Acaba de publicarse purrr. Es un paquete del universo Wickham que ofrece funciones para desarrollar otro dialecto funcional sobre R.
R es un lenguaje oportunista: ni del todo funcional, ni del todo orientado a objetos, ni del todo procedural. Es como es porque nació con un objetivo muy concreto y fue adoptando cosas de aquí y de allá como cuando uno recorre el supermercado. Merece la pena traer a colación cómo el primerísimo R (cuando era S), durante los ochenta, antes de adoptar la forma actual a través de los diversos libros de colores de Chambers y compañía, estaba fuertemente inspirado por Lisp.</description>
    </item>
    
    <item>
      <title>Hoy he echado de menos Scala</title>
      <link>/2014/06/12/hoy-he-echado-de-menos-scala/</link>
      <pubDate>Thu, 12 Jun 2014 07:00:56 +0000</pubDate>
      
      <guid>/2014/06/12/hoy-he-echado-de-menos-scala/</guid>
      <description>Hoy he escrito
last.date &amp;lt;- max(Filter(function(x) format(x, &amp;quot;%m&amp;quot;) == &amp;quot;03&amp;quot;, all.filled.data$Date))  y he echado mucho de menos Scala.
Más sobre Scala:
 * Si yo fuera rey, todos los niños aprenderían Scala. * Al tipo que inventó Scala le gustan tanto o más los [_oneliners_](http://es.wikipedia.org/wiki/Los_santos_inocentes_(novela)) que a mí. * Todavía me llevo mal con el compilador. * La gente viene a Suiza y aprende el alemán malhablado de aquí; yo, ya véis, Scala.</description>
    </item>
    
    <item>
      <title>Programación funcional en R: Reduce</title>
      <link>/2011/02/28/programacion-funcional-en-r-reduce/</link>
      <pubDate>Mon, 28 Feb 2011 09:07:36 +0000</pubDate>
      
      <guid>/2011/02/28/programacion-funcional-en-r-reduce/</guid>
      <description>Siguiendo con la serie de artículos sobre programación funcional que comencé hablando de Filter() hace un tiempo, trataré hoy la función Reduce(). El contenido de cuanto sigue debería ser familiar de quienes asistieron al Taller Avanzado de R en las II Jornadas de Usuarios de R.
Reduce es el segundo de los tiempos de una abstracción popularizado por Google y otros pero que tiene sus raíces en los lenguajes funcionales (Lisp y otros): map-reduce.</description>
    </item>
    
    <item>
      <title>Programación funcional en R: Filter</title>
      <link>/2010/11/24/programacion-funcional-en-r-filter/</link>
      <pubDate>Wed, 24 Nov 2010 09:08:05 +0000</pubDate>
      
      <guid>/2010/11/24/programacion-funcional-en-r-filter/</guid>
      <description>Quienes acudan a Mieres la semana que viene me oirán hablar de programación funcional en R. Algo de lo que no hablaré pero que dejaré acá escrito como abrebocas es un pequeño ejemplo de cómo la programación funcional hace tu vida más simple y, sobre todo, prolonga la vida de tu teclado.
Voy a ilustrar el uso de una función de R que echábamos de menos los usuarios de Python: Filter.</description>
    </item>
    
  </channel>
</rss>
