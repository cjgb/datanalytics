<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google ads on datanalytics</title>
    <link>/tags/google-ads/</link>
    <description>Recent content in google ads on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Fri, 08 Mar 2019 08:13:02 +0000</lastBuildDate><atom:link href="/tags/google-ads/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aviso para navegadores</title>
      <link>/2019/03/08/aviso-para-navegadores/</link>
      <pubDate>Fri, 08 Mar 2019 08:13:02 +0000</pubDate>
      
      <guid>/2019/03/08/aviso-para-navegadores/</guid>
      <description>Ayer estuvimos pensando de dónde se podían obtener ejemplos de búsquedas de usuarios (sí, lo que la gente escribe en, p.e., Google cuando busca algo). Y parece que hay empresas que venden ese tipo de datos.
Pregunta: ¿de dónde los sacan?
Alguien que conoce el negocio la respondió en Quora. Parece que existen tres fuentes. Una de ellas es la de los llamados click stream data. Parece que Jumpshot es una de las empresas que las recolectan.</description>
    </item>
    
    <item>
      <title>Pesos de los componentes del QualityScore en Google Ads</title>
      <link>/2019/03/07/pesos-de-los-componentes-del-qualityscore-en-google-ads/</link>
      <pubDate>Thu, 07 Mar 2019 08:13:34 +0000</pubDate>
      
      <guid>/2019/03/07/pesos-de-los-componentes-del-qualityscore-en-google-ads/</guid>
      <description>El llamado QualityScore tiene su relevancia en Google Ads. Es un indicador con valores entre 1 y 10 asignado por Google que se basa en tres variables que están descritas por ahí:
 PostClickQualityScore * SearchPredictedCtr * CreativeQualityScore  Se trata de variables categóricas con tres niveles: en / por encima de / por debajo de la media.
Haciendo
&amp;lt;code&amp;gt;modelo &amp;lt;- lm(QualityScore ~ PostClickQualityScore + SearchPredictedCtr + CreativeQualityScore, data = tmp) summary(modelo)&amp;lt;/code&amp;gt;  se obtiene</description>
    </item>
    
  </channel>
</rss>
