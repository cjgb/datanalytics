<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>imágenes on datanalytics</title>
    <link>/tags/im%C3%A1genes/</link>
    <description>Recent content in imágenes on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Mon, 10 Mar 2014 07:07:47 +0000</lastBuildDate><atom:link href="/tags/im%C3%A1genes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Guarjolización de fotos con R</title>
      <link>/2014/03/10/guarjolizacion-de-fotos-con-r/</link>
      <pubDate>Mon, 10 Mar 2014 07:07:47 +0000</pubDate>
      
      <guid>/2014/03/10/guarjolizacion-de-fotos-con-r/</guid>
      <description>Inspirado en esto aunque con la intención de mejorar el horrible código adjunto, escribí el otro día esto:
library(&amp;quot;biOps&amp;quot;) library(&amp;quot;cluster&amp;quot;) # leo una foto usando readJpeg de biOps # el objeto devuelto es un array mxnx3 dimensional # la última dimensión es el rgb de cada pixel tmp &amp;lt;- tempfile() &amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/utils/download.file&amp;quot;&amp;gt;download.file(&amp;quot;http://blog.guiasenior.com/images/Retrato_Garber.jpg&amp;quot;, tmp) x &amp;lt;- readJpeg(tmp) # si quieres mostrar la foto como un gráfico... #plot(x) # convertimos el array 3D nxmx3 en uno 2D (nm)x3 # luego buscamos 5 clústers # esencialmente, buscamos 7 &amp;quot;píxels representativos&amp;quot; d &amp;lt;- dim(x) clarax &amp;lt;- &amp;lt;a href=&amp;quot;http://inside-r.</description>
    </item>
    
  </channel>
</rss>
