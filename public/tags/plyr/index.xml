<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plyr on datanalytics</title>
    <link>/tags/plyr/</link>
    <description>Recent content in plyr on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Wed, 25 Jan 2017 08:13:47 +0000</lastBuildDate><atom:link href="/tags/plyr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>El número efectivo de partidos</title>
      <link>/2017/01/25/el-numero-efectivo-de-partidos/</link>
      <pubDate>Wed, 25 Jan 2017 08:13:47 +0000</pubDate>
      
      <guid>/2017/01/25/el-numero-efectivo-de-partidos/</guid>
      <description>El número efectivo de partidos es el nombre de una página de la Wikipedia, que contiene la fórmula
$latex N = \frac{1}{\sum_i p_i^2}$
y excipiente alrededor.
Aplicada a España (usando datos del CIS como proxy),
Como casi siempre, el código:
library(rvest) library(rvest) library(reshape2) library(plyr) library(zoo) url &amp;lt;- &amp;quot;http://www.cis.es/cis/export/sites/default/-Archivos/Indicadores/documentos_html/sB606050010.html&amp;quot; raw &amp;lt;- read_html(url) tmp &amp;lt;- html_nodes(raw, &amp;quot;table&amp;quot;) tmp &amp;lt;- html_table(tmp[[2]], fill = TRUE) colnames(tmp)[1] &amp;lt;- &amp;quot;partido&amp;quot; tmp &amp;lt;- tmp[!is.na(tmp$partido),] tmp &amp;lt;- tmp[1:30,] tmp &amp;lt;- melt(tmp, id.</description>
    </item>
    
    <item>
      <title>Dos nuevos tutoriales sobre data.table y dplyr</title>
      <link>/2016/07/12/dos-nuevos-tutoriales-sobre-data-table-y-dplyr/</link>
      <pubDate>Tue, 12 Jul 2016 08:13:34 +0000</pubDate>
      
      <guid>/2016/07/12/dos-nuevos-tutoriales-sobre-data-table-y-dplyr/</guid>
      <description>Los productos de Apple, aun admitiendo su calidad, resuelven problemas que yo hace años que no tenía. Tanto data.table como dplyr vinieron a resolver problemas a los que muchos nos enfrentábamos con sudor y lágrimas.
Ha aparecido recientemente una serie de tutoriales sobre ambos paquetes que recomiendo:
 * El de [`data.table`](https://rollingyours.wordpress.com/2016/06/14/fast-aggregation-of-large-data-with-the-data-table-package/) * El de `dplyr` ([parte I](https://rollingyours.wordpress.com/2016/06/29/express-intro-to-dplyr/), [parte II](https://rollingyours.wordpress.com/2016/07/07/express-dplyr-part-ii/))  Y mis comentarios:
 * Para el 99% de mis problemas de manipulación de datos, me sobra con, además de R base, `reshape2` y `plyr`.</description>
    </item>
    
    <item>
      <title>Descarga de datos del Ibex 35 (¿y otros?) minuto a minuto en tiempo (casi) real</title>
      <link>/2016/05/20/descarga-de-datos-del-ibex-35-y-otros-minuto-a-minuto-en-tiempo-casi-real/</link>
      <pubDate>Fri, 20 May 2016 08:13:54 +0000</pubDate>
      
      <guid>/2016/05/20/descarga-de-datos-del-ibex-35-y-otros-minuto-a-minuto-en-tiempo-casi-real/</guid>
      <description>El código es
library(httr) library(&amp;lt;a href=&amp;quot;http://inside-r.org/packages/cran/plyr&amp;quot;&amp;gt;plyr) base.url &amp;lt;- &amp;quot;http://www.infobolsa.es/1/wtdb/ChartIntraday&amp;quot; res &amp;lt;- POST(base.url, body = list(mv = &amp;quot;M SAN&amp;quot;, date = &amp;quot;20160518&amp;quot;, compressionMult = 1, isSession = 1)) dat &amp;lt;- content(res, &amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/methods/as&amp;quot;&amp;gt;as = &amp;quot;parsed&amp;quot;, type = &amp;quot;application/json&amp;quot;) dat &amp;lt;- dat$answer$LST$TV$T09 dat &amp;lt;- ldply(dat, unlist)  Los mutatis mutandis, si alguien tiene la gentileza, en los comentarios.</description>
    </item>
    
    <item>
      <title>plyr, dplyr, data.table: ¿qué opinas?</title>
      <link>/2014/09/24/plyr-dplyr-data-table-que-opinas/</link>
      <pubDate>Wed, 24 Sep 2014 07:13:27 +0000</pubDate>
      
      <guid>/2014/09/24/plyr-dplyr-data-table-que-opinas/</guid>
      <description>Fui un pájaro mañanero con [plyr](http://cran.r-project.org/web/packages/plyr/index.html).
Probé una vez [data.table](http://cran.r-project.org/web/packages/data.table/index.html) y no me convenció. Volví a él cuando realmente lo necesitaba y ahora es la prolongación de mis dedos.
Aún no me he puesto con [dplyr](http://cran.r-project.org/web/packages/dplyr/index.html) aunque he visto el suficiente código escrito con él que no creo que me cueste mucho comenzar a usarlo.
Pero tengo la sensación de que tenemos un cisma como el de vi contra emacs en ciernes.</description>
    </item>
    
    <item>
      <title>Totales agregados por bloques en tablas</title>
      <link>/2014/03/25/totales-agregados-por-bloques-en-tablas/</link>
      <pubDate>Tue, 25 Mar 2014 07:45:50 +0000</pubDate>
      
      <guid>/2014/03/25/totales-agregados-por-bloques-en-tablas/</guid>
      <description>En ocasiones uno quiere añadir un total calculado en ciertos bloques a una tabla. Por ejemplo, en la tabla
&amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/base/set.seed&amp;quot;&amp;gt;set.seed(1234) ventas.orig &amp;lt;- data.frame(cliente = rep(1:10, each = 5), producto = rep(letters[1:5], times = 10), importe = &amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/stats/rlnorm&amp;quot;&amp;gt;rlnorm(50))  tenemos clientes, productos e importes. Y nos preguntamos por el porcentaje en términos de importe que cada producto supone para cada cliente.
Una manera natural pero torpe de realizar este cálculo consiste en usar un objeto intermedio y merge:</description>
    </item>
    
    <item>
      <title>Dependencias funcionales en R con foodweb</title>
      <link>/2013/05/08/dependencias-funcionales-en-r-con-foodweb/</link>
      <pubDate>Wed, 08 May 2013 07:17:59 +0000</pubDate>
      
      <guid>/2013/05/08/dependencias-funcionales-en-r-con-foodweb/</guid>
      <description>El otro día tropecé con un problema de rendimiento con R y al utilizar Rprof() encontré muchas llamadas a funciones que yo no hacía directamente.
La principal sospechosa era la función daply (del paquete plyr) que parecía depender de bastantes otras. Uno puede navegar el código de las funciones para identificar esas dependencias, pero, mirad qué maravilla:
library(&amp;lt;a href=&amp;quot;http://inside-r.org/packages/cran/mvbutils&amp;quot;&amp;gt;mvbutils) library(&amp;lt;a href=&amp;quot;http://inside-r.org/packages/cran/plyr&amp;quot;&amp;gt;plyr) foodweb(find.funs(&amp;quot;package:plyr&amp;quot;), &amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/rpart/prune&amp;quot;&amp;gt;prune = &amp;quot;laply&amp;quot;)  genera

Ahí se ve la dependencia de daply con respecto a laply.</description>
    </item>
    
  </channel>
</rss>
