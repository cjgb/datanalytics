<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fractales on datanalytics</title>
    <link>/tags/fractales/</link>
    <description>Recent content in fractales on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Tue, 26 Oct 2010 21:27:06 +0000</lastBuildDate><atom:link href="/tags/fractales/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A vueltas con los fractales</title>
      <link>/2010/10/26/a-vueltas-con-los-fractales/</link>
      <pubDate>Tue, 26 Oct 2010 21:27:06 +0000</pubDate>
      
      <guid>/2010/10/26/a-vueltas-con-los-fractales/</guid>
      <description>Si bien no hace mucho publicaba una entrada sobre el triángulo de Sierpinsky, mi tocayo Carlos Ortega (y ahora gentil colaborador) nos ha proporcionado un enlace en este blog a un pedazo de código que bien vale la pena replicar aquí para el solaz (y tal vez, incluso, provecho) de los lectores de estas páginas. Es:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  library(fields) # for tim.</description>
    </item>
    
    <item>
      <title>Para que copien, peguen y disfruten: addenda</title>
      <link>/2010/04/21/para-que-copien-peguen-y-disfruten-addenda/</link>
      <pubDate>Wed, 21 Apr 2010 21:53:21 +0000</pubDate>
      
      <guid>/2010/04/21/para-que-copien-peguen-y-disfruten-addenda/</guid>
      <description>Ayer dejé publicadas unas cuantas líneas de R y la promesa de contar de qué iba la cosa. Adelantando acontecimientos, he recibido comentarios públicos y privados al respecto que en esta entrada trataré de contestar.
El código era, una vez mínimamente desofuscado (no quería dar demasiadas pistas):
1 2 3 4 5 6 7 8 9 10 11  vertice.x &amp;lt;- c(0,1,2) # 1 vertice.y &amp;lt;- c(0,1,0) # 2 muestra &amp;lt;- sample( 1:3, 100000, replace = T ) # 3 iter &amp;lt;- function( ini, v ){ # 4 out &amp;lt;- rep( ini, length(v) ) # 5 for( i in 2:length(v) ) out[i] &amp;lt;- ( out[i-1] + v[i] ) / 2 # 6 out } plot( iter( runif(1), v.</description>
    </item>
    
  </channel>
</rss>
