<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programación on datanalytics</title>
    <link>/tags/programaci%C3%B3n/</link>
    <description>Recent content in programación on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Wed, 30 Sep 2020 09:13:00 +0000</lastBuildDate><atom:link href="/tags/programaci%C3%B3n/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Una guía (breve, concisa) para crear código (y proyectos) reproducibles</title>
      <link>/2020/09/30/una-guia-breve-concisa-para-crear-codigo-y-proyectos-reproducibles/</link>
      <pubDate>Wed, 30 Sep 2020 09:13:00 +0000</pubDate>
      
      <guid>/2020/09/30/una-guia-breve-concisa-para-crear-codigo-y-proyectos-reproducibles/</guid>
      <description>Está aquí y creo que no se le puede quitar ni poner una coma. Es particularmente oportuna porque trata todas esas cosas que nunca se enseñan y que la mucha gente, en el peor de los casos, malaprende.</description>
    </item>
    
    <item>
      <title>De texto a función</title>
      <link>/2020/01/21/de-texto-a-funcion/</link>
      <pubDate>Tue, 21 Jan 2020 17:46:00 +0000</pubDate>
      
      <guid>/2020/01/21/de-texto-a-funcion/</guid>
      <description>Problema: convertir una expresión definida por un usuario (p.e., algo como &amp;quot;a+b&amp;quot;) en una función (i.e., function(a, b) a + b).
Solución:
gen_foo &amp;lt;- function(expr){ my_args &amp;lt;- all.vars(parse(text = expr)) expr &amp;lt;- paste0(&amp;quot;function(&amp;quot;, paste(my_args, collapse = &amp;quot;,&amp;quot;), &amp;quot;) &amp;quot;, expr) eval(parse(text = expr)) }  Demostración:
multiplica &amp;lt;- gen_foo(&amp;quot;a * b&amp;quot;) multiplica(5, 31)  </description>
    </item>
    
    <item>
      <title>Todo lo que deberías saber sobre encodings</title>
      <link>/2019/02/20/todo-lo-que-deberias-saber-sobre-encodings/</link>
      <pubDate>Wed, 20 Feb 2019 08:13:56 +0000</pubDate>
      
      <guid>/2019/02/20/todo-lo-que-deberias-saber-sobre-encodings/</guid>
      <description>¿Por qué (casi) nadie sabe sobre encodings? ¿Por qué (casi) nadie ha leído What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text?</description>
    </item>
    
    <item>
      <title>Modas y fotogenia del código secuencial</title>
      <link>/2019/02/14/modas-y-fotogenia-del-codigo-secuencial/</link>
      <pubDate>Thu, 14 Feb 2019 08:13:14 +0000</pubDate>
      
      <guid>/2019/02/14/modas-y-fotogenia-del-codigo-secuencial/</guid>
      <description>Este tipo de programación se puso de moda en los noventa:
Y yo decía: ¿dónde están mis bucles? ¿Y mis bifurcaciones?
Este tipo de programación está de moda últimamente:
&amp;lt;code&amp;gt;hourly_delay &amp;lt;- flights %&amp;gt;% filter(!is.na(dep_delay)) %&amp;gt;% group_by(date, hour) %&amp;gt;% summarise( delay = mean(dep_delay), n = n() ) %&amp;gt;% filter(n &amp;gt; 10)&amp;lt;/code&amp;gt;  Y todo bien, sí, pero sigo sin tener bucles o bifurcaciones.
Tal vez no hagan falta. Al menos, para cosas de andar por casa.</description>
    </item>
    
    <item>
      <title>Cerebros &#34;hackeados&#34;</title>
      <link>/2019/01/25/cerebros-hackeados/</link>
      <pubDate>Fri, 25 Jan 2019 08:13:56 +0000</pubDate>
      
      <guid>/2019/01/25/cerebros-hackeados/</guid>
      <description>Tengo delante Los cerebros ‘hackeados’ votan de Harari, autor de cierta y reciente fama. Elabora sobre un argumento simple y manido: el cerebro funciona como un ordenador y los seres humanos somos no solo perfectamente predecibles sino también perfectamente manipulables. De lo que se derivan muchas funestas consecuencias en lo político y en lo social.
El artículo me ha sido recomendado por dos personas cuyo criterio tengo en muy alta estima.</description>
    </item>
    
    <item>
      <title>Documentar como el culo, no pensar en el usuario final, ser incapaz de ponerte en su situación, etc.</title>
      <link>/2018/02/28/documentar-como-el-culo-no-pensar-en-el-usuario-final-ser-incapaz-de-ponerte-en-su-situacion-etc/</link>
      <pubDate>Wed, 28 Feb 2018 08:13:54 +0000</pubDate>
      
      <guid>/2018/02/28/documentar-como-el-culo-no-pensar-en-el-usuario-final-ser-incapaz-de-ponerte-en-su-situacion-etc/</guid>
      <description>De vez en cuando pruebo paquetes promisorios. No es infrecuente que cosas que he intentado hace años, algún ejemplo más o menos sencillo que he publicado aquí, acabe convirtiéndose en la piedra angular de algo facturable. Incluso de algo facturable por mí.
geozoning podía haber sido uno de esos. La promesa del paquete es que puede ayudarte a segmentar regiones del espacio de acuerdo con alguna variable, una especie de clústering para información de tipo espacial.</description>
    </item>
    
    <item>
      <title>Cuidado con los $</title>
      <link>/2017/12/11/cuidado-con-los/</link>
      <pubDate>Mon, 11 Dec 2017 08:13:03 +0000</pubDate>
      
      <guid>/2017/12/11/cuidado-con-los/</guid>
      <description>El otro tropezamos con el siguiente artefacto:
a &amp;lt;- list(aa = 12, bb = 14) is.null(a$a) #[1] FALSE a$a #[1] 12  No es un bug de R, por que la documentación reza:
Y se pueden constrastar:
a[[&amp;quot;a&amp;quot;, exact = FALSE]] a[[&amp;quot;a&amp;quot;, exact = TRUE]]  Comentarios:
 * Odio muchísimo los _bugs_ que no son _bugs_ porque están documentados en el la nota ‡2.a.(c), párrafo §23.3 de la sección 14 de un manual oscuro.</description>
    </item>
    
    <item>
      <title>Efectos secundarios (nota: que existan no significa que debas usarlos)</title>
      <link>/2017/10/10/efectos-secundarios-nota-que-existan-no-significa-que-debas-usarlos/</link>
      <pubDate>Tue, 10 Oct 2017 08:13:11 +0000</pubDate>
      
      <guid>/2017/10/10/efectos-secundarios-nota-que-existan-no-significa-que-debas-usarlos/</guid>
      <description>Una función no debería cambiar nada de cuanto la rodea. Debería devolver algo y ya. Se acepta barco como animal acuático cuando hay funciones que escriben en logs, guardan datos en disco o crean gráficos.
R deja que los usuarios se disparen en el pie permitiendo hacer cosas tan peligrosas como:
a &amp;lt;- new.env() a$1 # error foo &amp;lt;- function(){ a$a &amp;lt;- 1 } foo() a$a # [1] 1  De la misma manera, si le enseñas un cuchillo a una vieja, es posible que te dé su bolso con todo lo que contiene.</description>
    </item>
    
    <item>
      <title>Syberia tiene muy buena pinta [pero...]</title>
      <link>/2017/07/05/syberia-tiene-muy-buena-pinta-pero/</link>
      <pubDate>Wed, 05 Jul 2017 08:13:54 +0000</pubDate>
      
      <guid>/2017/07/05/syberia-tiene-muy-buena-pinta-pero/</guid>
      <description>Echadle un vistazo a Syberia (y me contáis qué tal os va). Tiene muy buena pinta y puede ser útil para produccionalizar código.
[Esto es casi todo; lo que sigue es omitible.]
Sin embargo y sin que necesariamente haga desmerecer a Syberia como tal, en la página arriba enlazada se lee:
Nada tengo contra que R sea (o deje de ser) azúcar sintáctico. Si lo fuese sobre LISP, tanto mejor. Pero lenguajes de programación hay cientos mientras que statistical tools que merezcan el nombre, solo una [¿es correcto concordar con la traducción más natural de tools?</description>
    </item>
    
    <item>
      <title>Diapositivas sobre mi charla acerca del &#34;stack analítico&#34;</title>
      <link>/2017/05/15/diapositivas-sobre-mi-charla-acerca-del-stack-analitico/</link>
      <pubDate>Mon, 15 May 2017 08:13:43 +0000</pubDate>
      
      <guid>/2017/05/15/diapositivas-sobre-mi-charla-acerca-del-stack-analitico/</guid>
      <description>Tuve ocasión el pasado jueves, en Barcelona y gracias a la invitación de KSchool, de lo que llamo el stack analítico. Es decir, de aquellas herramientas tecnológicas necesarias para poder hacer ciencia de datos hoy en día.
Las diapositivas de la charla están aquí.
El tema es viejo pero no por ello menos urgente: existen herramientas (y, desgraciadamente, me he visto a incluir el saber leer documentación técnica en inglés) cuyo conocimiento es imperativo para poder trabajar de manera efectiva en ciencia de datos.</description>
    </item>
    
    <item>
      <title>Habiendo mónadas, ¿quién quiere callbacks?</title>
      <link>/2016/11/24/habiendo-monadas-quien-quiere-callbacks/</link>
      <pubDate>Thu, 24 Nov 2016 08:13:35 +0000</pubDate>
      
      <guid>/2016/11/24/habiendo-monadas-quien-quiere-callbacks/</guid>
      <description>Nunca me he visto en la tesitura de tener que usar callbacks porque no son mi guerra. Pero por lo que he oído de la gente que sabe mucho más que yo, son uno de esos infiernos de los que hay que huir con el mismo pavor que de los fors, los ifs, los elses (¡argggg! ¡he escrito else!) y los whiles.
Una pequeña maravilla teórica que me ha hecho replantearme la absoluta inutilidad de aquello que estudié en Álgebra III (funtores y demás) son las mónadas.</description>
    </item>
    
    <item>
      <title>Una jerarquía de analistas de datos en cuatro escalafones</title>
      <link>/2016/10/03/una-jerarquia-de-analistas-de-datos-en-cuatro-escalafones/</link>
      <pubDate>Mon, 03 Oct 2016 08:13:31 +0000</pubDate>
      
      <guid>/2016/10/03/una-jerarquia-de-analistas-de-datos-en-cuatro-escalafones/</guid>
      <description>Es:
 * **Nivel 1:** Realizan la mayor parte de su trabajo con herramientas ofimáticas (fundamentalmente Excel), aunque pueden utilizar puntualmente Eviews, Stata, R o Matlab. * **Nivel 2:** Los que realizan la mayor parte de su trabajo con R, Python, SAS o SQL pero cuyo sistema de control de versiones es el de ficheros con determinadas convenciones de nombres. * **Nivel 3:** Como el anterior, pero usando control de versiones, estilos de código, y revisión por pares (_peer review_).</description>
    </item>
    
    <item>
      <title>Lenguajes de programación probabilísticos</title>
      <link>/2016/03/09/lenguajes-de-programacion-probabilisticos/</link>
      <pubDate>Wed, 09 Mar 2016 09:13:09 +0000</pubDate>
      
      <guid>/2016/03/09/lenguajes-de-programacion-probabilisticos/</guid>
      <description>Son lenguajes de programación diseñados para describir odelos probabilísticos y realizar inferencias sobre dichos modelos.
El resto de la entrada de la Wikipedia sobre este apasionante (y lo uso sin retintín) tema, aquí (y puede que también quieras visitar esto).</description>
    </item>
    
    <item>
      <title>Unix para poetas</title>
      <link>/2015/10/07/unix-para-poetas/</link>
      <pubDate>Wed, 07 Oct 2015 08:13:01 +0000</pubDate>
      
      <guid>/2015/10/07/unix-para-poetas/</guid>
      <description>Existe una breve obrita, Unix for Poets, que utiliza el análisis cuantitativo de texto como excusa para aprender a manejar una serie de comandos inexcusables de Unix y sus derivados: wc, grep, etc.
Se la recomiendo particularmente a aquellos que se compraron una Mac y no saben que cuentan con una terminal decente oculta en alguna parte de su sistema (en serio, los hay: el otro día se la descubrí a una maquera).</description>
    </item>
    
    <item>
      <title>Guías de estilo para programar en R</title>
      <link>/2015/09/04/guias-de-estilo-para-programar-en-r/</link>
      <pubDate>Fri, 04 Sep 2015 08:13:38 +0000</pubDate>
      
      <guid>/2015/09/04/guias-de-estilo-para-programar-en-r/</guid>
      <description>Frans van Dunné me ha hecho llegar su guía de estilo de programación en R. Abunda en otra creada por Google hace un tiempo y que traduje y adapté aquí.
Tiene como novedad, dice, su adaptación a las formas y maneras de Hadley Wickham, aún no tan conocido entonces. Coinciden, no obstante, en lo más.
Ninguna de las dos trata el uso las tuberías (operador %&amp;gt;%). Pero es un asunto que se nos puede ir de las manos: de hecho, hoy he conocido el paquete [backpipe](https://github.</description>
    </item>
    
    <item>
      <title>APIdays Mediterranea vuelve a Barcelona (la semana que viene)</title>
      <link>/2015/04/30/apidays-mediterranea-vuelve-a-barcelona-la-semana-que-viene/</link>
      <pubDate>Thu, 30 Apr 2015 08:13:10 +0000</pubDate>
      
      <guid>/2015/04/30/apidays-mediterranea-vuelve-a-barcelona-la-semana-que-viene/</guid>
      <description>Los que estéis por allí o tengáis la posibilidad de acudir, sabed: la semana que viene (5, 6 y 7 de mayo de 2015) se celebra una nueva edición de APIdays Mediterránea en Barcelona.

Quienes tengáis pensado acudir, podéis beneficiaros de un 30% de descuento si os registráis desde este enlace.
Participé en la edición de 2013 en Madrid y me duele no poder asistir este año. Entre otras cosas, por esto.</description>
    </item>
    
    <item>
      <title>R en paralelo</title>
      <link>/2014/05/15/r-en-paralelo/</link>
      <pubDate>Thu, 15 May 2014 07:13:59 +0000</pubDate>
      
      <guid>/2014/05/15/r-en-paralelo/</guid>
      <description>Trabajo sobre una máquina de 8 núcleos y 24 GB de RAM. Y que conste que se me ha llegado a quedar chica.
Algunos programas que ejecuto tienen (o contienen pedazos de) la forma
 1. calcula A 2. calcula B 3. calcula C 4. combina A, B y C  Obviamente, se me ocurre ejecutarlos así:
 1. calcula A, B y C en paralelo 2. cuando acabe el paso anterior, combina A, B y C  Y aún me sobrarían 5 núcleos y bastante RAM.</description>
    </item>
    
    <item>
      <title>Y sin embargo, te quiero</title>
      <link>/2014/05/14/y-sin-embargo-te-quiero/</link>
      <pubDate>Wed, 14 May 2014 07:20:53 +0000</pubDate>
      
      <guid>/2014/05/14/y-sin-embargo-te-quiero/</guid>
      <description>Copio aquí unas líneas:
Pertenecen al resumen de un artículo que enlazo aquí por si a alguien le intrigan el nudo y el desenlaza de ese planteamiento.</description>
    </item>
    
    <item>
      <title>Guía de estilo de R (de Google)</title>
      <link>/2014/01/27/guia-de-estilo-de-r-de-google/</link>
      <pubDate>Mon, 27 Jan 2014 08:21:42 +0000</pubDate>
      
      <guid>/2014/01/27/guia-de-estilo-de-r-de-google/</guid>
      <description>R es un lenguaje de programación de alto nivel que se usa principalmente en aplicaciones estadísticas y para la generación de gráficos. El objetivo de esta guía de estilo es que nuestro código sea más fácil de leer, compartir y analizar. Las reglas de esta guía fueron consensuadas con la comunidad de usuarios de R en Google.
 * **Resumen de las reglas de estilo** 1. Nombres de ficheros: tienen la extensión `.</description>
    </item>
    
    <item>
      <title>Por qué no deberías compartir tu código: diez motivos</title>
      <link>/2013/04/30/por-que-no-deberias-compartir-tu-codigo-diez-motivos/</link>
      <pubDate>Tue, 30 Apr 2013 07:47:28 +0000</pubDate>
      
      <guid>/2013/04/30/por-que-no-deberias-compartir-tu-codigo-diez-motivos/</guid>
      <description>Fresco aún en nuestro recuerdo el fiasco de Excel del que nos ocupamos hace unos días, los partidarios de la reproducibilidad, el software subversivo y gratuito, los detractores de las herramientas propietarias y otras estirpes han agudizado su campaña en pro de lo que denominan una mayor transparencia en el proceso de creación científica.
Como contrapeso a tanto despropósito, traigo a la consideración de mis lectores una visión alternativa que desnuda los desatinos de la caterva y recoge diez motivos incontestables por los que compartir código es una sinrazón.</description>
    </item>
    
    <item>
      <title>textConnection y ficheros anónimos: cuestión de rendimiento</title>
      <link>/2013/04/04/textconnection-y-ficheros-anonimos/</link>
      <pubDate>Thu, 04 Apr 2013 07:48:59 +0000</pubDate>
      
      <guid>/2013/04/04/textconnection-y-ficheros-anonimos/</guid>
      <description>La función textConnection de R es útil para leer el contenido de una variable como si fuese un fichero de texto. Verbigracia,
zz &amp;lt;- textConnection(LETTERS) readLines(zz, 2)  Pero cuando uno hace
?textConnection  y lee con detenimiento, encuentra la siguiente nota:
Vamos, que desaconseja usar dicha función por motivos de rendimiento cuando no vayan a usarse todas las sus características de las que file carece. Pero, ¿será cierto que el rendimiento es tan malo?</description>
    </item>
    
    <item>
      <title>Cortar una cadena por un caracter solo cuando no forme parte de una subcadena entrecomillada</title>
      <link>/2013/03/04/cortar-una-cadena-por-un-caracter-solo-cuando-no-forme-parte-de-una-subcadena-entrecomillada/</link>
      <pubDate>Mon, 04 Mar 2013 07:31:46 +0000</pubDate>
      
      <guid>/2013/03/04/cortar-una-cadena-por-un-caracter-solo-cuando-no-forme-parte-de-una-subcadena-entrecomillada/</guid>
      <description>Algunos usuarios del paquete pxR han avisado de un error de implementación. Según las especificaciones del formato de datos PC-Axis, las líneas de ese tipo de ficheros acaban en punto y coma (y no necesariamente en un salto de línea).
Así que era natural leer los ficheros íntegramente, concatenar sus líneas físicas y luego partirlas usando strsplit para obtener las líneas lógicas.
Sin embargo, ciertos ficheros contienen descripciones (entrecomilladas) que contienen puntos y comas.</description>
    </item>
    
    <item>
      <title>Herramientas de depuración en R</title>
      <link>/2011/10/26/herramientas-de-depuracion-en-r/</link>
      <pubDate>Wed, 26 Oct 2011 06:48:56 +0000</pubDate>
      
      <guid>/2011/10/26/herramientas-de-depuracion-en-r/</guid>
      <description>R dispone de un conjunto de herramientas para depurar (debug) programas. Yo suelo usar la función debug de manera casi exclusiva y sistemática, pero leyendo The Art of R Programming he dado con una discusión sistemática sobre el proceso de depuración así como algunas herramientas adicionales.
Una de las primeras que menciona el libro es la función stopifnot, que puede ser intercalada en el código para verificar condiciones necesarias (y lanzar un error en caso de que no se cumplan):</description>
    </item>
    
    <item>
      <title>Gestión avanzada de memoria en R: tracemem (II)</title>
      <link>/2011/10/14/gestion-avanzada-de-memoria-en-r-tracemem-ii/</link>
      <pubDate>Fri, 14 Oct 2011 07:43:29 +0000</pubDate>
      
      <guid>/2011/10/14/gestion-avanzada-de-memoria-en-r-tracemem-ii/</guid>
      <description>He leído estos días el capítulo 14 de The Art of R Programming que trata problemas y trucos para mejorar el rendimiento de R en términos de velocidad y memoria. Menciona la función tracemem de la que nos ocupamos el otro día.
Menciona el capítulo cómo uno de los estranguladores del rendimiento de R es su política de copiar al cambiar (copy-on-change). Generalmente, cuando modificamos un objeto, R realiza una copia íntegra de él (¿y qué pasa si realizamos pequeñas modificaciones en un objeto muy grande?</description>
    </item>
    
    <item>
      <title>Gestión avanzada de memoria en R: tracemem</title>
      <link>/2011/10/03/gestion-avanzada-de-memoria-en-r-tracemem/</link>
      <pubDate>Mon, 03 Oct 2011 07:15:16 +0000</pubDate>
      
      <guid>/2011/10/03/gestion-avanzada-de-memoria-en-r-tracemem/</guid>
      <description>Muchos usuarios de R se enfrentan en alguna ocasión a problemas con el uso y gestión de la memoria. La función tracemem es útil a la hora de identificar ineficiencias en el código.
En su página de ayuda se lee:
 Esta función marca un objeto de forma que se imprime un mensaje cada vez que se llama a la función interna duplicate. Esto sucede cuando dos objetos comparten la misma memoria y uno de ellos se modifica.</description>
    </item>
    
    <item>
      <title>Códigos de caracteres en R</title>
      <link>/2011/09/08/codigos-de-caracteres-en-r/</link>
      <pubDate>Thu, 08 Sep 2011 07:00:47 +0000</pubDate>
      
      <guid>/2011/09/08/codigos-de-caracteres-en-r/</guid>
      <description>Esta entrada acompaña y remata para los usuarios de R la que escribí en general sobre los códigos de caracteres. Es un pequeño experimento en el que comparo lo que pasa al leer un fichero de texto codificado de dos maneras distintas en dos plataformas, Linux y Windows, que usan códigos de caracteres distintos.
Primero creo dos ficheros (en Linux) con el mismo contenido pero codificados de dos maneras distintas, utf-8 y latin1:</description>
    </item>
    
    <item>
      <title>Códigos de caracteres, unicode y UTF-8</title>
      <link>/2011/09/06/codigos-de-caracteres-unicode-y-utf-8/</link>
      <pubDate>Tue, 06 Sep 2011 07:00:44 +0000</pubDate>
      
      <guid>/2011/09/06/codigos-de-caracteres-unicode-y-utf-8/</guid>
      <description>Unos quebraderos de cabeza en el desarrollo del paquete pxR concernientes a los distintos códigos de caracteres en que hay que transfomar los datos me han obligado a profundizar en este enojoso asunto.
En el principio, todo era felicidad. Existía el código ASCII que establecía una correspondencia entre caracteres, números y su representación binaria. Así, a la letra b le correspondía el número 98 cuya codificación binaria es el byte 01100010.</description>
    </item>
    
    <item>
      <title>Don&#39;t be loopy!</title>
      <link>/2011/08/11/dont-be-loopy/</link>
      <pubDate>Thu, 11 Aug 2011 07:28:36 +0000</pubDate>
      
      <guid>/2011/08/11/dont-be-loopy/</guid>
      <description>Don&amp;rsquo;t be loopy! es el título de una presentación realizada en el SAS Global Forum de 2007. Tiene que ver con el motivo que me hizo en mi día abandonar SAS y buscar —entonces aún no lo conocía— el cobijo de R: sus limitaciones para todo lo que tiene que ver con simulaciones, remuestreos, jackknifes, _bootstraps _y similares.
El artículo muestra lo que debería ser el estado del arte para realizar este tipo de programas con SAS.</description>
    </item>
    
    <item>
      <title>Desarrollo de paquetes con R (IV): funciones genéricas</title>
      <link>/2011/08/04/desarrollo-de-paquetes-con-r-iv-funciones-genericas/</link>
      <pubDate>Thu, 04 Aug 2011 07:26:52 +0000</pubDate>
      
      <guid>/2011/08/04/desarrollo-de-paquetes-con-r-iv-funciones-genericas/</guid>
      <description>La función plot es genérica. Uno puede aplicársela a un data.frame o a un objeto de la clase lm. Y en el fondo, plot sólo elige cuál de sus métodos, es decir, las funciones que realizan el trabajo verdaderamente, aplicar. Para ver cuáles son los métodos asociados a plot basta con ejecutar en R
1  methods(plot)   La salida es autoexplicativa.
Podemos hacer un pequeño experimento creando una función genérica, foo, bastante tonta:</description>
    </item>
    
    <item>
      <title>Desarrollo de paquetes con R (III): check, check, check</title>
      <link>/2011/07/12/desarrollo-de-paquetes-con-r-iii-check-check-check/</link>
      <pubDate>Tue, 12 Jul 2011 07:35:00 +0000</pubDate>
      
      <guid>/2011/07/12/desarrollo-de-paquetes-con-r-iii-check-check-check/</guid>
      <description>Uno de los pasos más importantes en el desarrollo de un paquete es verificar que funciona correctamente. Un check comprueba la estructura del paquete, la consistencia entre el código y la documentación, que no faltan secciones importantes en esta última, que los ejemplos pueden ejecutarse sin problemas, etc.
De ahí que sirva para para muchos propósitos. En particular, si uno elige los ejemplos que acompañan a la documentación de las funciones con buen criterio, éstos servirán no sólo para ilustrar el comportamiento de las funciones sino, también, para verificar el funcionamiento del paquete.</description>
    </item>
    
    <item>
      <title>Desarrollo de paquetes con R (II): primeros pasos</title>
      <link>/2011/06/30/desarrollo-de-paquetes-con-r-ii-primeros-pasos/</link>
      <pubDate>Thu, 30 Jun 2011 07:36:54 +0000</pubDate>
      
      <guid>/2011/06/30/desarrollo-de-paquetes-con-r-ii-primeros-pasos/</guid>
      <description>La segunda entrada en mi serie sobre la creación de paquetes con R cubre los primeros pasos en la creación de uno. Bastan para tener una primera versión de un paquete en minutos. Pero antes, unos consejos generales:
 Usar algún tipo de sistema operativo basado en Unix: Linux, Mac OS, etc. o Cygwin en el peor de los casos. Tengo que confesar que yo comencé a usar Linux precisamente por este motivo: los procedimientos y herramientas que se utilizan para construir paquetes de R están influenciadas por la tradición Unix.</description>
    </item>
    
    <item>
      <title>Minitutorial de subversion</title>
      <link>/2011/06/13/minitutorial-de-subversion/</link>
      <pubDate>Mon, 13 Jun 2011 07:41:42 +0000</pubDate>
      
      <guid>/2011/06/13/minitutorial-de-subversion/</guid>
      <description>Por popular demanda, voy a ilustrar en esta entrada el uso de subversion para el desarrollo colaborativo de software. Lo escribo teniendo en mente el desarrollo de paquetes alojados en R-Forge y para usuarios de sistemas operativos más o menos decentes. A quienes usan Windows les recomiendo Tortoise, cuyo uso queda fuera del alcance de lo que sigue.
En primer lugar, para los desavisados: subversion es un programa para gestionar versiones de ficheros.</description>
    </item>
    
    <item>
      <title>Gestión de proyectos en R</title>
      <link>/2011/06/08/gestion-de-proyectos-en-r/</link>
      <pubDate>Wed, 08 Jun 2011 07:36:35 +0000</pubDate>
      
      <guid>/2011/06/08/gestion-de-proyectos-en-r/</guid>
      <description>Muchos de mis lectores tienen, seguro, maneras distintas —y probablemente mejores— de organizar sus proyectos en R que yo. Pero me consta que a algunos les cuesta no convertir sus carpetas en un caos en los que sólo ellos se manejan —hasta que pasa el tiempo, se olvidan y tienen que volver sobre ello—. Para ellos, para sugerirles un procedimiento eficiente de trabajo, va esta entrada. En ella describo cómo organizo mis propios proyectos con R.</description>
    </item>
    
    <item>
      <title>Consejos para utilizar R &#34;en producción&#34;</title>
      <link>/2011/05/13/consejos-para-utilizar-r-en-produccion/</link>
      <pubDate>Fri, 13 May 2011 07:58:02 +0000</pubDate>
      
      <guid>/2011/05/13/consejos-para-utilizar-r-en-produccion/</guid>
      <description>El otro día di con una entrada en una bitácora con cinco consejos para utilizar R en producción. Cuatro de ellos son razonables:
 Crear un sistema de validación, monitorización y alertas. Y, en particular, desarrollar un mecanismo para que R notifique los problemas encontrados por correo electrónico. En la entrada original hay código que puede utilizarse para tal fin. Usar la función sink para facilitar la detección y corrección de los errores.</description>
    </item>
    
    <item>
      <title>Paralelización de bucles con foreach</title>
      <link>/2011/04/08/paralelizacion-de-bucles-con-foreach/</link>
      <pubDate>Fri, 08 Apr 2011 07:26:41 +0000</pubDate>
      
      <guid>/2011/04/08/paralelizacion-de-bucles-con-foreach/</guid>
      <description>Parcialmente en agradecimiento a Revolution Analytics por haber concedido una subvención a las III Jornadas de usuarios de R voy a discutir en esta entrada cómo paralelizar bucles usando los paquetes foreach y doMC desarrollados por dicha empresa.
El paquete foreach contiene, esencialmente, una única función, foreach, que, en su forma más básica, permite ejecutar bucles con una sintaxis un tanto peculiar:
1  foreach( i = 1:3 ) %do% log( i )   Volveré sobre algunas operaciones interesantes y bastante útiles que permite realizar esta función porque, de todas ellas, hoy me ocuparé sólo de una: la que abre la puerta de una manera sencilla a la paralelización de bucles.</description>
    </item>
    
    <item>
      <title>A esa gente le había hecho falta un matemático</title>
      <link>/2011/04/01/a-esa-gente-le-habia-hecho-falta-un-matematico/</link>
      <pubDate>Fri, 01 Apr 2011 07:31:39 +0000</pubDate>
      
      <guid>/2011/04/01/a-esa-gente-le-habia-hecho-falta-un-matematico/</guid>
      <description>A esa gente le había hecho falta, en efecto, un matemático. Les hubiera bastado saber mi número de teléfono y no habrían cometido tamaña tontería y habrían tenido a sus accionistas más satisfechos. Explicaré el asunto. Será muy instructivo para quienes opinan que no valemos para gran cosa.
Hace mucho, mucho tiempo, tanto que las neuronas que se acuerdan de eso están llenas de polvo, en un país muy, muy lejos de éste, trabajé en un proyecto cuya naturaleza no viene al caso.</description>
    </item>
    
    <item>
      <title>Paréntesis, corchetes y rendimiento en R</title>
      <link>/2011/03/16/parentesis-corchetes-y-rendimiento-en-r/</link>
      <pubDate>Wed, 16 Mar 2011 09:31:45 +0000</pubDate>
      
      <guid>/2011/03/16/parentesis-corchetes-y-rendimiento-en-r/</guid>
      <description>Conforme se populariza el uso de R, cobran creciente importancia las cuestiones concernientes a su rendimiento, su gestión de la memoria, etc. Hasta el punto que incluso uno de sus creadores, Ross Ihaka, ha expresado últimamente su descontento con las limitaciones de R (el enlace es gentileza de Daniel Castro) sugiriendo que sus componentes puramente estadísticos deberían construirse sobre la base de un lenguaje distinto, posiblemente Lisp.
Dentro de este contexto de preocupación sobre el rendimiento de R, han aflorado algunas cuestiones acerca de la eficiencia del intérprete a la hora de resolver expresiones matemáticas.</description>
    </item>
    
    <item>
      <title>¿Cómo mejorar tu estilo de programación en R?</title>
      <link>/2011/03/08/como-mejorar-tu-estilo-de-programacion-en-r/</link>
      <pubDate>Tue, 08 Mar 2011 09:59:28 +0000</pubDate>
      
      <guid>/2011/03/08/como-mejorar-tu-estilo-de-programacion-en-r/</guid>
      <description>En un hilo reciente en la lista de desarrollo de R ha habido una discusión interesante acerca de buenas prácticas a la hora programar con R y concretamente, para desarrollar paquetes que contuviesen llamadas a código desarrollado en C/C++.
En particular, el autor del primer mensaje del hilo criticaba varios usos que consideraba inadecuados a la hora de programar en R:
 El uso de variables misteriosas surgidas de la nada.</description>
    </item>
    
    <item>
      <title>Cómo reordenar niveles de factores en R</title>
      <link>/2011/02/15/como-reordenar-niveles-de-factores-en-r/</link>
      <pubDate>Tue, 15 Feb 2011 02:10:57 +0000</pubDate>
      
      <guid>/2011/02/15/como-reordenar-niveles-de-factores-en-r/</guid>
      <description>En esta entrada voy a mostrar tres maneras (que vienen a ser la misma) de ordenar los niveles de un factor en R:
 La básica La sofisticada El atajo  Antes, responderé a una pregunta: ¿por qué reordenar niveles en factores? La mejor respuesta que se me ocurre: si no la sabes, deja de leer ya. Te aseguro que, a poco que trabajes con R, acabarás retomando la lectura.</description>
    </item>
    
    <item>
      <title>Rudimentos para la manipulación de fechas con R</title>
      <link>/2011/02/02/1387/</link>
      <pubDate>Wed, 02 Feb 2011 09:05:25 +0000</pubDate>
      
      <guid>/2011/02/02/1387/</guid>
      <description>Puede que a alguien le resulte sencillo, pero jamás ameno: trabajar con fechas y horas es, cuando menos, una molestia con cualquier lenguaje de programación. Y como mi compañero Raúl ofreció en su bitácora una pequeña guía de cómo operar con ellas usando SAS/WPS, me dispongo yo a hacer lo propio con R.
Leyendo fechas y horas: strptime El primer encontronazo con el insidioso problema de las fechas y las horas suele ser el tener que leerlas de algún fichero de texto.</description>
    </item>
    
    <item>
      <title>¿Es Cobol tan robusto como cuentan?</title>
      <link>/2010/12/30es-cobol-tan-robusto-como-cuentan/</link>
      <pubDate>Thu, 30 Dec 2010 09:05:51 +0000</pubDate>
      
      <guid>/2010/12/30es-cobol-tan-robusto-como-cuentan/</guid>
      <description>El diario El País se ha hecho eco de algo que no hace falta ser particularmente perspicaz para advertir. Y no me refiero tanto a la tesis global del artículo como a este parrafito,
 [&amp;hellip;] ambos opinan que la primera disfunción está en la Universidad. &amp;ldquo;Estamos hablando de trabajadores sobreeducados que, sin embargo, carecen de las habilidades necesarias para desempeñar el trabajo&amp;rdquo;. Este contrasentido está en relación directa &amp;ldquo;con el tipo de docencia impartida en las Universidades&amp;rdquo;, añaden.</description>
    </item>
    
    <item>
      <title>Comportamiento inesperado... ¿sólo por mí?</title>
      <link>/2010/11/02/comportamiento-inesperado-solo-por-mi/</link>
      <pubDate>Tue, 02 Nov 2010 22:18:21 +0000</pubDate>
      
      <guid>/2010/11/02/comportamiento-inesperado-solo-por-mi/</guid>
      <description>El otro día, bajo el encabezamiento Unexpected behabiour of min, tapply and POSIXct/POSIXlt classes?, mandé a la lista de desarrolladores de R el siguiente pedazo de código:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  before &amp;lt;- Sys.time() Sys.sleep( 1 ) now1 &amp;lt;- now2 &amp;lt;- Sys.</description>
    </item>
    
    <item>
      <title>Rutinas de C en R</title>
      <link>/2010/09/26/rutinas-de-c-en-r/</link>
      <pubDate>Sun, 26 Sep 2010 23:13:39 +0000</pubDate>
      
      <guid>/2010/09/26/rutinas-de-c-en-r/</guid>
      <description>Esta entrada que ahora hago es un pequeño tutorial que publiqué en mi primera página de internet a principios de siglo, cuando todavía usaba Windows regularmente. Es posible que gran parte de lo que en ella cuente esté ya mandado a recoger. No obstante, tampoco hace tanto, eché mano de lo que en ella había dejado escrito para ver cómo migrar a Windows algo que había hecho en Linux y&amp;hellip; todavía funcionó.</description>
    </item>
    
    <item>
      <title>Una tarea para mis lectores: ¡resultados!</title>
      <link>/2010/09/06/tarea-lectores-resultados/</link>
      <pubDate>Mon, 06 Sep 2010 22:41:11 +0000</pubDate>
      
      <guid>/2010/09/06/tarea-lectores-resultados/</guid>
      <description>El otro día dejé planteadauna tarea para mis lectores (que han sido menos diligentes que yo, incluso). Trataba de una comparación entre varios métodos para acceder a diccionarios (o hashes) de datos desde R para tratar de identificar el más eficiente en términos de velocidad de acceso.
Acá van los resultados:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  n &amp;lt;- 100000 dat &amp;lt;- data.</description>
    </item>
    
    <item>
      <title>Una tarea para mis lectores</title>
      <link>/2010/08/17/una-tarea-para-mis-lectores/</link>
      <pubDate>Tue, 17 Aug 2010 21:09:38 +0000</pubDate>
      
      <guid>/2010/08/17/una-tarea-para-mis-lectores/</guid>
      <description>Ayer me dieron los resultados de unos análisis de sangre y, contra todo pronóstico, la médica me dijo que tengo el colesterol bajo control. ¡Con razón —me dije—, si en el blog lo hago yo todo! Así que para mejorar la circulación sanguínea de mis lectores, esta entrada es un ejercicio para quienes me leen. Espero pues que, a pesar de lo vacacional de las fechas, tengan tiempo de completar lo que queda sin hacer y lo hagan constar —antes de que pase lista— en un comentario explicando sus averiguaciones.</description>
    </item>
    
  </channel>
</rss>
