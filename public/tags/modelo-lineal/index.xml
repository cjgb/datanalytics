<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>modelo lineal on datanalytics</title>
    <link>/tags/modelo-lineal/</link>
    <description>Recent content in modelo lineal on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Wed, 17 Jul 2019 09:13:55 +0000</lastBuildDate><atom:link href="/tags/modelo-lineal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sobre la peculiarísima implementación del modelo lineal en (pseudo-)scikit-learn</title>
      <link>/2019/07/17/sobre-la-peculiarisima-implementacion-del-modelo-lineal-en-pseudo-scikit-learn/</link>
      <pubDate>Wed, 17 Jul 2019 09:13:55 +0000</pubDate>
      
      <guid>/2019/07/17/sobre-la-peculiarisima-implementacion-del-modelo-lineal-en-pseudo-scikit-learn/</guid>
      <description>Si ejecutas
import numpy as np from sklearn.linear_model import LinearRegression n = 1000 X = np.random.rand(n, 2) Y = np.dot(X, np.array([1, 2])) + 1 + np.random.randn(n) / 2 reg = LinearRegression().fit(X, Y) reg.intercept_ reg.coef_  se obtiene más o menos lo esperado. Pero si añades una columna linealmente dependiente,
X = np.column_stack((X, 1 * X[:,1]))  ocurren cosas de la más calamitosa especie:
Y = np.dot(X, np.array([1, 2, 1])) + 1 + np.</description>
    </item>
    
    <item>
      <title>¿Victoria o diferencia de puntos? ¿lm o glm?</title>
      <link>/2014/03/04/victoria-o-diferencia-de-puntos-lm-o-glm/</link>
      <pubDate>Tue, 04 Mar 2014 07:08:18 +0000</pubDate>
      
      <guid>/2014/03/04/victoria-o-diferencia-de-puntos-lm-o-glm/</guid>
      <description>Supongamos que queremos construir un modelo para predecir quién ganará un determinado partido de baloncesto basándonos en datos diversos. Y en un histórico, por supuesto.
Podemos utilizar una regresión logística así:
&amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/base/set.seed&amp;quot;&amp;gt;set.seed(1234) my.coefs &amp;lt;- -2:2 n &amp;lt;- 200 train.n &amp;lt;- floor(2*n/3) test.error.glm &amp;lt;- function(){ X &amp;lt;- matrix(rnorm(n*5), n, 5) Y &amp;lt;- (0.2 + X %*% my.coefs + rnorm(n)) &amp;gt; 0 train &amp;lt;- sample(1:n, train.n) X &amp;lt;- &amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/base/as.data.frame&amp;quot;&amp;gt;as.data.frame(X) X$Y &amp;lt;- Y mod.</description>
    </item>
    
    <item>
      <title>El modelo lineal en Youtube</title>
      <link>/2012/03/02/el-modelo-lineal-en-youtube/</link>
      <pubDate>Fri, 02 Mar 2012 07:07:58 +0000</pubDate>
      
      <guid>/2012/03/02/el-modelo-lineal-en-youtube/</guid>
      <description>Gentileza de Juanjo Gibaja, tenemos en Youtube una colección entera de vídeos sobre el modelo lineal. Y seguramente, pronto, sobre más asuntos de relevancia estadística.
Y dejo aquí uno de los de la serie:
http://www.youtube.com/watch?v=5-kQWu7Uag8</description>
    </item>
    
  </channel>
</rss>
