<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>caret on datanalytics</title>
    <link>/tags/caret/</link>
    <description>Recent content in caret on datanalytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Mon, 11 Mar 2019 08:13:26 +0000</lastBuildDate><atom:link href="/tags/caret/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Charla (mía) el día de pi (de 2019) en Elche</title>
      <link>/2019/03/11/charla-mia-el-dia-de-pi-de-2019-en-elche/</link>
      <pubDate>Mon, 11 Mar 2019 08:13:26 +0000</pubDate>
      
      <guid>/2019/03/11/charla-mia-el-dia-de-pi-de-2019-en-elche/</guid>
      <description>Los detalles logísticos, en
Hablaré de lo de casi siempre: que pese a los cantos de sirena que se oyen en la profesión (predecir por encima de todo, xgbost es el único dios y caret su profeta, etc.) existen muchos problemas reales (de los que dan de comer) donde es necesario modelar la estructura subyacente de los datos con mucho mimo. Eso más la descripción detallada de un proyecto bastante sofisticado en el que ando metido.</description>
    </item>
    
    <item>
      <title>Caret y rejillas: ¿es necesario utilizar fuerza bruta?</title>
      <link>/2016/03/21/caret-y-rejillas-es-necesario-utilizar-fuerza-bruta/</link>
      <pubDate>Mon, 21 Mar 2016 09:13:25 +0000</pubDate>
      
      <guid>/2016/03/21/caret-y-rejillas-es-necesario-utilizar-fuerza-bruta/</guid>
      <description>Durante la charla de Carlos Ortega del pasado jueves sobre el paquete caret y sus concomitancias, se planteó el asunto de la optimización de los parámetros de un modelo usando rejillas (grids) de búsqueda.
Cuando un determinado algoritmo depende de, p.e., cuatro parámetros, se puede definir una rejilla como en
gbmGrid &amp;lt;- &amp;lt;a href=&amp;quot;http://inside-r.org/r-doc/base/expand.grid&amp;quot;&amp;gt;expand.grid(interaction.depth = c(1, 5, 9), n.trees = (1:30)*50, shrinkage = 0.1, n.minobsinnode = 20)  y caret se encarga de ajustar el modelo bajo todas esas combinaciones de parámetros (90 en el ejemplo) para ver cuál de ellas es, con las debidas salvedades, óptima.</description>
    </item>
    
  </channel>
</rss>
